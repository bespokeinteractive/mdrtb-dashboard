<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqldiff PUBLIC "-//OpenMRS//DTD OpenMRS SQL Diff Config 1.0//EN" "http://resources.openmrs.org/doctype/sqldiff-1.0.dtd">

<sqldiff version="1.0">
	<help>
		USE:
			The diffs are ordered by datamodel version number.
			The script can be run in a top down fashion and is
			expected to not failor overwrite old data

		EXPECT:
			- "use business-database-name;" was called prior to
			   calling this script
	</help>
	
	<diff>
		<version>1.0.0</version>
		<author>Dennis Henry</author>
		<date>Dec 24th 2016</date>
		<description>
			Create Location tables
		</description>
		<sql>
			CREATE TABLE IF NOT EXISTS location_centres_agencies (
				agency_id INT NOT NULL AUTO_INCREMENT,
				name VARCHAR(255) NOT NULL,
				created_on DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
				created_by INT(11) NOT NULL DEFAULT 1,
				
				PRIMARY KEY (agency_id),
				UNIQUE INDEX name_agency_unique (name ASC),
				CONSTRAINT fk_location_agency_person1 FOREIGN KEY (created_by) REFERENCES person(person_id) ON DELETE NO ACTION  ON UPDATE NO ACTION
			);
			
			CREATE TABLE IF NOT EXISTS location_centres_regions (
				region_id INT NOT NULL AUTO_INCREMENT,
				name VARCHAR(255) NOT NULL,
				created_on DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
				created_by INT(11) NOT NULL DEFAULT 1,
				
				PRIMARY KEY (region_id),
				UNIQUE INDEX name_region_unique (name ASC),
				CONSTRAINT fk_location_region_person1 FOREIGN KEY (created_by) REFERENCES person(person_id) ON DELETE NO ACTION  ON UPDATE NO ACTION
			);
			
            CREATE TABLE IF NOT EXISTS location_centres (
				centre_id INT NOT NULL AUTO_INCREMENT,
				serial_number VARCHAR(255) NOT NULL,				
				location_id INT(11) NOT NULL,
				region_id INT(11) NOT NULL,
				agency_id INT(11) NOT NULL,
				created_on DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
				created_by INT(11) NOT NULL DEFAULT 1,
				
				PRIMARY KEY (centre_id), 
				UNIQUE INDEX name_centre_unique (serial_number ASC),				
				CONSTRAINT fk_location_centres_location FOREIGN KEY (location_id) REFERENCES Location (location_id) ON DELETE NO ACTION ON UPDATE NO ACTION,
				CONSTRAINT fk_location_centres_region FOREIGN KEY (region_id) REFERENCES location_centres_regions (region_id) ON DELETE NO ACTION ON UPDATE NO ACTION,
				CONSTRAINT fk_location_centres_agency FOREIGN KEY (agency_id)  REFERENCES location_centres_agencies (agency_id) ON DELETE NO ACTION ON UPDATE NO ACTION,				
				CONSTRAINT fk_location_centres_person1   FOREIGN KEY (created_by)  REFERENCES person (person_id) ON DELETE NO ACTION ON UPDATE NO ACTION
			);
        </sql>
	</diff>
	
	<diff>
		<version>1.0.1</version>
		<author>Dennis Henry</author>
		<date>Jan 13th 2017</date>
		<description>
			Create patient_program_details
		</description>
		<sql>
			CREATE TABLE IF NOT EXISTS patient_program_details (
				id INT NOT NULL AUTO_INCREMENT,
				patient_program_id INT(11) NOT NULL,
				tbmu_number VARCHAR(255) NULL,
				lab_number VARCHAR(255) NULL,
				description VARCHAR(255) NULL,

				PRIMARY KEY (id),
				UNIQUE INDEX tbmu_number_unique (tbmu_number ASC),
				CONSTRAINT fk_patient_program_idx FOREIGN KEY (patient_program_id) REFERENCES patient_program(patient_program_id) ON DELETE NO ACTION  ON UPDATE NO ACTION
			);
        </sql>
	</diff>

	<diff>
		<version>1.0.2</version>
		<author>Dennis Henry</author>
		<date>Apr 21th 2017</date>
		<description>
			Alter patient_program_details
		</description>
		<sql>
            ALTER TABLE patient_program_details
            ADD referral_program_id INT NULL AFTER patient_program_id,
            ADD daamin_name VARCHAR(150) NULL AFTER lab_number,
            ADD daamin_contacts VARCHAR(250) NULL AFTER daamin_name;
		</sql>
	</diff>
	
	<diff>
		<version>1.0.3</version>
		<author>Dennis Henry</author>
		<date>Apr 21th 2017</date>
		<description>
			Create Table containing List of all Facilities
		</description>
		<sql>
            CREATE TABLE IF NOT EXISTS location_facilities (
				id INT NOT NULL AUTO_INCREMENT,
				name VARCHAR(255) NOT NULL,
				status VARCHAR(50) NOT NULL DEFAULT 'active',
				location_id INT(11) NOT NULL,
				created_on DATETIME NOT NULL,
				created_by INT(11) NOT NULL DEFAULT 1,
				description VARCHAR(255) NULL,
				
				PRIMARY KEY (id),
				CONSTRAINT fk_location_facilities_location FOREIGN KEY (location_id) REFERENCES Location (location_id) ON DELETE NO ACTION ON UPDATE NO ACTION,
				CONSTRAINT fk_location_facilities_person1   FOREIGN KEY (created_by)  REFERENCES person (person_id) ON DELETE NO ACTION ON UPDATE NO ACTION
			);
		</sql>
	</diff>

	<diff>
		<version>1.0.4</version>
		<author>Dennis Henry</author>
		<date>Jun 27th 2017</date>
		<description>
			Add Field for Confirmation Type in patient_program_details
		</description>
		<sql>
			ALTER TABLE patient_program_details
			ADD site_confirmation INT(11) NULL AFTER disease_site,
			ADD site_confirmation INT(11) NULL AFTER outcome;
		</sql>
	</diff>
	
	<diff>
		<version>1.0.5</version>
		<author>Dennis Henry</author>
		<date>Sept 12th 2017</date>
		<description>
			Add patient_program_transfers Table to store Transfers
		</description>
		<sql>
			CREATE TABLE `patient_program_transfers` (
			  `id` int(11) NOT NULL AUTO_INCREMENT,
			  `location_id` int(11) DEFAULT '0',
			  `patient_program_id` int(11) DEFAULT '0',
			  `transfer_date` date DEFAULT NULL,
			  `transfer_processed` int(11) DEFAULT '0',
			  PRIMARY KEY (`id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
		</sql>
	</diff>

	<diff>
		<version>1.0.6</version>
		<author>Dennis Henry</author>
		<date>Oct 2nd 2017</date>
		<description>
			Alter patient_program_transfers Table to include void options
		</description>
		<sql>
            ALTER TABLE patient_program_transfers
            ADD voided int(11) DEFAULT '0',
            ADD voided_by int(11) NULL,
			ADD void_date DATETIME NULL,
			ADD void_reason VARCHAR(255) NULL,
            ADD CONSTRAINT fk_patient_program_transfers_person1 FOREIGN KEY (voided_by) REFERENCES users (user_id) ON DELETE NO ACTION ON UPDATE NO ACTION;
		</sql>
	</diff>
</sqldiff>
